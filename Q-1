class Solution {
    //brute force approach
    public static void brute(int [][] matrix){
        //first we will traverse the matrix to alter all zero's rows and columns
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]==0){
                    for(int col=0;col<matrix[i].length;col++){
                        if(matrix[i][col]!=0){
                            matrix[i][col]=-1;
                        }
                    }
                    for(int row=0;row<matrix.length;row++){
                        if(matrix[row][j]!=0){
                            matrix[row][j]=-1;
                        }

                    }
                }
            }

        }
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]==-1){
                    matrix[i][j]=0;
                }
            }
        }
        return;
    }
    //optimal approach
    //take row array and column array to store zero's row and columns
    public static void optimal(int [][] matrix){
        int row[]=new int[matrix.length];
        int col[]=new int[matrix[0].length];
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]==0){
                    row[i]=-1;
                    col[j]=-1;
                }
            }
        }
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(row[i]==-1 || col[j]==-1){
                    matrix[i][j]=0;
                }
            }
        }
    }
    //best approach
    //don't use the extra space of O(m+n)
    public static void best(int [][]  matrix){
        int col0=1;
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(j==0 && matrix[i][j]==0){
                    col0=0;

                }
                else{
                    if(matrix[i][j]==0){
                    matrix[i][0]=0;
                    matrix[0][j]=0;

                }

                }
                
            }
        }
        for(int i=matrix.length-1;i>=0;i--){
            for(int j=matrix[0].length-1;j>=0;j--){
                if(j==0 && col0==0){
                    matrix[i][0]=0;
                    
                }
                else{
                    if(matrix[0][j]==0 || matrix[i][0]==0){
                        matrix[i][j]=0;
                    }
                }
            }
        }
    }
    public void setZeroes(int[][] matrix) {
        optimal(matrix);

        
    }
}
